#!/usr/bin/python3
#	gerberpeek - Render RS-274X Gerber files to image
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of gerberpeek.
#
#	gerberpeek is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	gerberpeek is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import os
import gerber
import argparse
from FriendlyArgumentParser import FriendlyArgumentParser

def nametuple(text):
	splittext = text.split(":", maxsplit = 1)
	if len(splittext) != 2:
		raise argparse.ArgumentTypeError("name/filename tuple needs to be of format name:filename, e.g., 'top:top.png', but '%s' is not" % (text))
	return splittext

parser = FriendlyArgumentParser(description = "Render and analyze RS-274X Gerber files.")
parser.add_argument("-d", "--resolution", metavar = "dpi", type = float, default = 300, help = "Specifies the render resolution in dots per inch. Defaults to %(default).0f dpi.")
parser.add_argument("-s", "--script", metavar = "filename", type = str, action = "append", default = [ ], help = "Specifies the render script or scripts, JSON files, to run. When multiple scripts are named, they can override specific settings of previous scripts, like definitions or add/change render steps. Defaults to only rendering 'renderscript.json'.")
parser.add_argument("-o", "--outfile", metavar = "name:filename", type = nametuple, action = "append", default = [ ], help = "When deliverables should be created, names the deliverables and the filenames they should be stored in, separated by colon. Can be specified multiple times to create multiple deliverables.")
parser.add_argument("--debug-intermediate", action = "store_true", help = "For debugging purposes, write all intermediate renderings (such as individual layers) to own files.")
parser.add_argument("-r", "--recursive", action = "store_true", help = "When giving directories as infiles, traverse them recursively, looking for files.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("infile", metavar = "filename", type = str, nargs = "+", help = "Raw Gerber files that should be processed by gerberpeek. Can also supply ZIP files that will be searched internally or directories (if recursive operation is requested).")
args = parser.parse_args(sys.argv[1:])

# Parse renderscript
renderscript = gerber.Renderscript(args)
if len(args.script) == 0:
	scripts = [ "renderscript.json" ]
else:
	scripts = args.script
for script_filename in scripts:
	renderscript.add_script(script_filename)
for source_file in args.infile:
	(base, ext) = os.path.splitext(source_file)
	if os.path.isfile(source_file):
		if ext.lower() != ".zip":
			renderscript.add_source(source_file)
		else:
			renderscript.add_source_archive(source_file)
	else:
		if args.recursive:
			for (basedir, subdirs, files) in os.walk(source_file):
				for filename in files:
					full_filename = basedir + "/" + filename
					renderscript.add_source(full_filename)
		else:
			print("%s: Ignoring directory, no recursive action requested." % (source_file), file = sys.stderr)

# Plausibilize deliverable names
for (name, filename) in args.outfile:
	if name not in renderscript.deliverable_names:
		raise KeyError("Output deliverable '%s' requested, but not provided by render script %s. Script only provides %s." % (name, ", ".join(scripts), ", ".join(sorted(renderscript.deliverable_names))))

# Deliver the expected files
for (name, filename) in args.outfile:
	result = renderscript.render(name)
	if result is not None:
		result.write_to_png(filename)
	else:
		print("Warning: Could not create deliverable %s / %s." % (name, filename), file = sys.stderr)
