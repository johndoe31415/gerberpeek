#!/usr/bin/python3
#	gerberpeek - Render RS-274X Gerber files to image
#	Copyright (C) 2019-2019 Johannes Bauer
#
#	This file is part of gerberpeek.
#
#	gerberpeek is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	gerberpeek is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import sys
import gerber
import argparse
from FriendlyArgumentParser import FriendlyArgumentParser

def nametuple(text):
	splittext = text.split(":", maxsplit = 1)
	if len(splittext) != 2:
		raise argparse.ArgumentTypeError("name/filename tuple needs to be of format name:filename, e.g., 'top:top.png', but '%s' is not" % (text))
	return splittext

parser = FriendlyArgumentParser(description = "Render and analyze RS-274X Gerber files.")
parser.add_argument("-r", "--resolution", metavar = "dpi", type = float, default = 300, help = "Specifies the render resolution in dots per inch. Defaults to %(default).0f dpi.")
parser.add_argument("-s", "--script", metavar = "filename", type = str, action = "append", default = [ ], help = "Specifies the render script or scripts, JSON files, to run. When multiple scripts are named, they can override specific settings of previous scripts, like definitions or add/change render steps. Defaults to only rendering 'renderscript.json'.")
parser.add_argument("-o", "--outfile", metavar = "name:filename", type = nametuple, action = "append", default = [ ], help = "When deliverables should be created, names the deliverables and the filenames they should be stored in, separated by colon. Can be specified multiple times to create multiple deliverables.")
parser.add_argument("--debug-intermediate", action = "store_true", help = "For debugging purposes, write all intermediate renderings (such as individual layers) to own files.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
parser.add_argument("infile", metavar = "filename", type = str, nargs = "+", help = "Raw Gerber files that should be processed by gerberpeek")
args = parser.parse_args(sys.argv[1:])

# Parse renderscript
renderscript = gerber.Renderscript(args)
if len(args.script) == 0:
	scripts = [ "renderscript.json" ]
else:
	scripts = args.script
for script_filename in scripts:
	renderscript.add_script(script_filename)
for source_file in args.infile:
	renderscript.add_source(source_file)

# Plausibilize deliverable names
for (name, filename) in args.outfile:
	if name not in renderscript.deliverable_names:
		raise KeyError("Output deliverable '%s' requested, but not provided by render script %s. Script only provides %s." % (name, args.script, ", ".join(sorted(renderscript.deliverable_names))))

# First pass determines the size of all files
#size_cb = gerber.SizeDeterminationCallback()
#for filename in args.infile:
#	gerber.Interpreter(filename, size_cb).run()
#dimensions = size_cb.max_pt - size_cb.min_pt
#offset_in = size_cb.min_pt
#dimension_in = size_cb.max_pt - size_cb.min_pt

#if args.verbose >= 1:
#	offset_mm = offset_in * 25.4
#	dimension_mm = dimension_in * 25.4
#	print("PCB offset   : %.3f / %.3f in (%.2f / %.2f mm)" % (offset_in.x, offset_in.y, offset_mm.x, offset_mm.y))
#	print("PCB dimension: %.3f / %.3f in (%.2f / %.2f mm)" % (dimension_in.x, dimension_in.y, dimension_mm.x, dimension_mm.y))

#renderscript.render("top_copper").write_to_png("1.png")
#renderscript.render("top_soldermask").write_to_png("2.png")
#renderscript.render("top_silkprint").write_to_png("3.png")

output = renderscript.render("top")
#output.write_to_png("x.png")

#cctx = gerber.CairoContext.create_inches(gerber.Vector2d(7, 7), dpi = 300)
#callback = gerber.CairoCallback(cctx, src_color = (1, 0, 0))
#cctx.write_to_png("output.png")
